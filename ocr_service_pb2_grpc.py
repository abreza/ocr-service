# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import ocr_service_pb2 as ocr__service__pb2

GRPC_GENERATED_VERSION = '1.67.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in ocr_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TextRecognitionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RecognizeText = channel.unary_unary(
                '/ocr.TextRecognition/RecognizeText',
                request_serializer=ocr__service__pb2.ImageRequest.SerializeToString,
                response_deserializer=ocr__service__pb2.TextRecognitionResponse.FromString,
                _registered_method=True)


class TextRecognitionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RecognizeText(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TextRecognitionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RecognizeText': grpc.unary_unary_rpc_method_handler(
                    servicer.RecognizeText,
                    request_deserializer=ocr__service__pb2.ImageRequest.FromString,
                    response_serializer=ocr__service__pb2.TextRecognitionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ocr.TextRecognition', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ocr.TextRecognition', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TextRecognition(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RecognizeText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ocr.TextRecognition/RecognizeText',
            ocr__service__pb2.ImageRequest.SerializeToString,
            ocr__service__pb2.TextRecognitionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TextLineDetectionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DetectTextLines = channel.unary_unary(
                '/ocr.TextLineDetection/DetectTextLines',
                request_serializer=ocr__service__pb2.ImageRequest.SerializeToString,
                response_deserializer=ocr__service__pb2.TextLineDetectionResponse.FromString,
                _registered_method=True)


class TextLineDetectionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DetectTextLines(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TextLineDetectionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DetectTextLines': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectTextLines,
                    request_deserializer=ocr__service__pb2.ImageRequest.FromString,
                    response_serializer=ocr__service__pb2.TextLineDetectionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ocr.TextLineDetection', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ocr.TextLineDetection', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TextLineDetection(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DetectTextLines(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ocr.TextLineDetection/DetectTextLines',
            ocr__service__pb2.ImageRequest.SerializeToString,
            ocr__service__pb2.TextLineDetectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class LayoutAnalysisStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AnalyzeLayout = channel.unary_unary(
                '/ocr.LayoutAnalysis/AnalyzeLayout',
                request_serializer=ocr__service__pb2.ImageRequest.SerializeToString,
                response_deserializer=ocr__service__pb2.LayoutAnalysisResponse.FromString,
                _registered_method=True)


class LayoutAnalysisServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AnalyzeLayout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LayoutAnalysisServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AnalyzeLayout': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeLayout,
                    request_deserializer=ocr__service__pb2.ImageRequest.FromString,
                    response_serializer=ocr__service__pb2.LayoutAnalysisResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ocr.LayoutAnalysis', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ocr.LayoutAnalysis', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LayoutAnalysis(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AnalyzeLayout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ocr.LayoutAnalysis/AnalyzeLayout',
            ocr__service__pb2.ImageRequest.SerializeToString,
            ocr__service__pb2.LayoutAnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ReadingOrderDetectionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DetectReadingOrder = channel.unary_unary(
                '/ocr.ReadingOrderDetection/DetectReadingOrder',
                request_serializer=ocr__service__pb2.ImageRequest.SerializeToString,
                response_deserializer=ocr__service__pb2.ReadingOrderResponse.FromString,
                _registered_method=True)


class ReadingOrderDetectionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DetectReadingOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReadingOrderDetectionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DetectReadingOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectReadingOrder,
                    request_deserializer=ocr__service__pb2.ImageRequest.FromString,
                    response_serializer=ocr__service__pb2.ReadingOrderResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ocr.ReadingOrderDetection', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ocr.ReadingOrderDetection', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ReadingOrderDetection(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DetectReadingOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ocr.ReadingOrderDetection/DetectReadingOrder',
            ocr__service__pb2.ImageRequest.SerializeToString,
            ocr__service__pb2.ReadingOrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TableRecognitionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RecognizeTables = channel.unary_unary(
                '/ocr.TableRecognition/RecognizeTables',
                request_serializer=ocr__service__pb2.ImageRequest.SerializeToString,
                response_deserializer=ocr__service__pb2.TableRecognitionResponse.FromString,
                _registered_method=True)


class TableRecognitionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RecognizeTables(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TableRecognitionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RecognizeTables': grpc.unary_unary_rpc_method_handler(
                    servicer.RecognizeTables,
                    request_deserializer=ocr__service__pb2.ImageRequest.FromString,
                    response_serializer=ocr__service__pb2.TableRecognitionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ocr.TableRecognition', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ocr.TableRecognition', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TableRecognition(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RecognizeTables(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ocr.TableRecognition/RecognizeTables',
            ocr__service__pb2.ImageRequest.SerializeToString,
            ocr__service__pb2.TableRecognitionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
